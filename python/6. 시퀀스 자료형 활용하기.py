#파이썬에서는 리스트, 튜플, range, 문자열처럼 값이 연속적으로 이어진 자료형을 시퀀스 자요형이라고 부름
# 시퀀스 자료형의 가장 큰 특징은 공통 도작과 기능을 제공한다는 점이다.
# 시퀀스 자료형으로 만든 객체를 시퀀스 객체라고 하며, 시퀀스 객체에 들어있는 각 값을 '요소'라고 함


#특정 값이 있는지 확인하기
# 리스트 a에서 30과 100이 있는지 확인하기
# 값 in 시퀀스 객체
from abc import abstractmethod


a = [0, 10, 20, 30, 40, 50]
30 in a
# True
100 in a
# False

# 리스트에 특정값 없는지 확인하기\
a = [0, 10, 20, 30]
100 not in a
# True
30 not in a
# False

# 튜플, range, 문자열도 같은 방법으로 활용할 수 있다.
43 in (38, 76, 43, 62, 19)
# True
1 in range(10)
# True
'p' in 'Hello, Python'
# True


#시퀀스 객체 연결하기
# 시퀀스 객체는 + 연산자를 사용하여 객체를 서로 연결하여 새 객체를 만들 수 있다.
# 시퀀스객체1 + 시퀀스객체2
a = [0, 10, 20, 30]
b = [9, 8, 7, 6]
a + b
# [0, 10, 20, 30, 9, 8, 7, 6]

# 단, 시퀀스 자료형 중에서 range는 + 연산자로 객체를 연결할 수 없다.
range(0, 10) + range(10, 20)
# 오류남

# 위의 오류를 막기 위해 range를 리스트 또는 튜플로 만들어서 연결하면 된다.
list(range(0, 10)) + list(range(10, 20))
# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
tuple(range(0, 10)) + tuple(range(10, 20))
# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]

#문자열은 + 연산자로 여러 문자열을 연결할 수 있다.
'Hello, ' + 'world!'
# 'Hello, world!'
# 파이썬에서 문자열 연결은 여러 가지 결과를 묶어서 한 번에 출력할 때 자주 사용한다.

# 문자열에 숫자를 연걸할 수 없다.
# 하지만 str을 사용하여 숫자(정수, 실수)를 문자열로 변환하면 된다.
# '문자열' + str(정수)
# '문자열' + str(실수)
'Hello, ' + str(10)
'Hello, 10'

# 시퀀스 객체 반복하기
# * 연산자는 시퀀스 객체를 특정 횟수만큼 반복하여 새 시퀀스 객체를 만든다(0 또는 음수를 곱하면 빈 객체가 나오며 실수는 곱할 수 없다).
# 시퀀스객체 * 정수
# 정수 * 시퀀스객체
[0, 10, 20, 30] * 3
# [0, 10, 20, 30, 0, 10, 20, 30, 0, 10, 20, 30]

#리스트와 튜플의 요소 개수 구하기
# 요소의 개수(길이)를 구할 때는 len 함수를 사용합니다
# len(시퀀스객체)

#리스트와 튜플의 요소 개수 구하기
a = [0, 10, 20, 30]
len(a)
# 4

#range의 숫자 생성 개수 구하기
len(range(0, 10, 2))
# 5
# range(0, 10, 2)는 0부터 10까지 2씩 증가하므로 0, 2, 4, 6, 8이다. 따라서 5가 나온다.

#문자열의 길이 구하기
hello = 'Hello, world!'
len(hello)
# 13

#인덱스 사용하기
# 이번에는 시퀀스 객체에 들어있는 요소에 접근하는 방법
# 시퀀스 객체의 각 요소는 순서가 정해져 있고, 이 순서를 인덱스라고 부릅니다.
# 다음과 같이 시퀀스 객체에 []를 붙이고 [] 안에 각 요소의 인덱스를 지정하면 해당요소에 접근할 수 있다.
# 시퀀스객체[인덱스]
a = [38, 21, 53, 62, 19]
a[0]
# 38
a[2]
# 53
r = range(0, 10, 2)
r[2]
# 4

#음수 인덱스 지정하기
a = [38, 21, 53, 62, 19]
a[-1] # 리스트의 뒤에서 첫 번째(인덱스 -1) 요소 출력
# 19
r = range(0, 10, 2)
r[-3]
# 4
hello = 'Hello, world!'
hello[-4]
# 'r'

#마지막 요소에 접근하기
a = [38, 21, 53, 62, 19]
a[len(a)]
# len(a)는 5이므로 인덱스가 범위를 벗어난다.
# 그래서 1을 빼주어야 함
a[len(a)-1] # 마지막 요소(인덱스 4) 출력
# 19

#요소에 값 할당하기
# 시퀀스 객체는 []로 요소에 접근한 뒤 =로 값을 할당한다.
# 시퀀스객체[인덱스] = 값
a = [0, 0, 0, 0, 0] #0이 5개 들어있는 리스트
a[0] = 38
a[1] = 21
a[2] = 53
a[3] = 62
a[4] = 19
a
# [38, 21, 53, 62, 19]
a[0]
# 38

# 주의: 튜플은 저장된 요소를 변경할 수 없으므로 인덱스 지정 후 값을 할당하면 에러가 발생한다.

#del로 요소 삭제하기
# 요소 삭제는 다음과 같이 del 뒤에 삭제할 요소를 지정해주면 된다.
# del 시퀀스객체[인덱스]
a = [38, 21, 53, 62, 19]
del a[2]
a
[38, 21, 62, 19]

# 주의: 튜플, range, 문자열도 안에 저장된 요소를 삭제할 수 없음

#슬라이스 사용하기
# 슬라이스는 무엇인가의 일부를 잘라낸다는 뜻으로 시퀀스 슬라이스도 말 그대로 시퀀스 객체의 일부를 잘라낸다.
# 시퀀스객체[시작인덱스:끝인덱스]

# 다음은 리스트의 일부를 잘라서 새 리스트를 생성
a = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90]
a[0:4]  # 인덱스 0부터 3까지 잘라서 새 리스트를 만듦
# [0, 10, 20, 30]

# 주의: 끝 인덱스는 가져오려는 범위에 포함되지 않는다. 따라서 끝 인덱스는 실제로 가져오려는 인덱스보다 1으 더 크게 지정해야함

a[0:10]
# [0, 10, 20, 30, 40, 50, 60, 70, 80, 90]

a[1:1]
[] # 인덱스 1부터 0까지 잘라서 새 리스트를 만듦
a[1:2] 
# 10
# 슬라이스를 했을 때 실제로 가져오는 요소는 시작 인덱스부터 끝 인덱스-1까지이다.

#리스트의 중간 부분 가져오기
a = [0, 10, 20, 30, 40, 50, 60, 70 ,80, 90]
a[4:7]
# [40, 50, 60]
# a[4:7]은 리스트 a 중간에 있는 인덱스 4부터 6까지 요소 3개를 가져온다.
# 특히 슬라이스는 a[4:-1]과 같이 음수를 인덱스로 지정할 수도 있다.
a[4:-1] # 인덱스 4부터 -2까지 요소 5개를 가져옴
# [40, 50, 60, 70, 80]


#인덱스 증가폭 사용하기
# 다음은 인덱스를 3씩 증가시키면서 요소를 가져온다.
# 여기서 주의할 점은 인덱스의 증가폭이지 요소의 값 증가폭이 아니라는 점이다.
# 시퀀스객체[시작인덱스:끝인덱스:인덱스증가폭]
a = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90]
a[2:8:3] # 인덱스 2부터 3씩 증가시키면서 인덱스 7까지 가져옴
# [20, 50] 끝 인덱스를 8로 지정했으므로 인덱스 7까지만 가져옴
# 인덱스 증가폭을 지정하더라도 가져오려는 인덱스(끝 인덱스-1)를 넘어설 수 없다는 것을 꼭 기억해야함

#인덱스 생략하기
# 슬라이스를 사용할 때 시작 인덱스와 끝 인덱스를 생략할 수도 있다.
# 인덱스를 생략하는 방법은 시퀀스 객체의 길이를 몰라도 되기 때문에 자주 쓰이는 방식이다.
# 주로 시퀀스 객체의 마지막 일부분만 출력할 때 사용함
#  리스트 a에서 a[:7]과 같이 시작 인덱스를 생략하면 리스트의 처음부터 끝 인덱스 -1(인덱스6)까지 가져온다.
# 시퀀스객체[:끝인덱스]
a = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90]
a[:7]
#[0, 10, 20, 30, 40, 50, 60]
a[7:]
[70, 80, 90]
# 시퀀스객체[:]는 리스트 전체를 가져온다.
a[:]
[0, 10, 20,  30, 40, 50, 60, 70, 80, 90]

#인덱스를 생략하면서 증가폭 사용하기
# 시퀀스객체[:끝인덱스:증가폭]
a = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90]
a[:7:2]  # 리스트의 처음부터 인덱스를 2씩 증가시키면서 인덱스 6까지 가져옴
# [0, 20, 40, 60]

# 시퀀스객체[시작인덱스::증가폭]
a[7::2]  # 인덱스 7부터 2씩 증가시키면서 리스트의 마지막 요소까지 가져옴
[70, 90]

# 시퀀스객체[::증가폭]
a[::2]  # 리스트 전체에서 인덱스 0부터 2씩 증가시키면서 요소를 가져옴
[0, 20, 40, 60, 80]

# 시퀀스객체[::] # 리스트 전체를 가져옴
# [0, 10, 20, 30, 40, 50, 60, 70, 80, 90]
# 즉 a[:] == a[::]

# 증가폭을 음수로 지정하면 인덱스를 1씩 감소시키면서 요소를 가져옴
a = [0, 10, 20, 30, 40, 50, 60, 70]
a[5:1:-1]
# [50, 40, 30, 20]
a[::-1]
# [70, 60, 50, 40, 30, 20, 10, 0]
# 리스트를 반대로 뒤집음

#len 응용하기
a = [0, 10, 20, 30, 40]
a[0:len(a)]  # 시작 인덱스에 0, 끝 인덱스에 len(a) 지정하여 리스트 전체를 가져옴
# [0, 10, 20, 30, 40]
a[:len(a)]
# [0, 10, 20, 30, 40]

#튜플, range, 문자열에 슬라이스 사용하기
# 튜플[시작인덱스:끝인덱스]
# 튜플[시작인덱스:끝인덱스:인덱스증가폭]
a = (0, 10, 20, 30, 40, 50, 60, 70, 80, 90)
b[4:7]  # 인덱스 4부터 6까지 요소 3개를 가져옴
# (40, 50, 60)
b[4:] # 인덱스 4부터 마지막 요소까지 가져옴
# (40, 50, 60, 70, 80, 90)
b[:7:2]  # 튜플의 처음부터 인덱스를 2씩 증가시키면서 인덱스 6까지 가져옴
# (0, 20, 40, 60)
 
# range객체[시작인덱스:끝인덱스]
# range객체[시작인덱스:끝인덱스:인덱스증가폭]
r = range(10)
r# range(0, 10)
r[4:7]  # 인덱스 4부터 6까지 숫자 3개를 생성하는 range 객체를 만듦
# range(4,7)
r[4:]  # 인덱스 4부터 9까지 숫자 6개를 생성하는 range 객체를 만듦
range(4, 10)
r[:7:2] # 인덱스 0부터 2씩 증가시키면서 인덱스 6까지 숫자 4개를 생성하는 range 객체를 만듦
# range(0, 7, 2)

# 잘라낸 range 객체를 리스트로 만들려면 list에 넣으면 list가 된다
list(r[:7:2])
[0, 2, 4, 6]

# 문자열[시작인덱스:끝인덱스]
# 문자열[시작인덱스:끝인덱스:인덱스증가폭]
hello = 'Hello, world!'
hello[2:9] # 인덱스 2부터 인덱스 8까지 잘라서 문자열을 만듦
# 'llo, wo'
hello[2:]  # 인덱스 2부터 마지막 요소까지 잘라서 문자열을 만듦
# 'llo, world!'

#슬라이스에 요소 할당하기
# 시퀀스 객체는 슬라이스로 범위를 지정하여 여러 요소에 값을 할당할 수 있다.
# 시퀀스객체[시작인덱스:끝인덱스] = 시퀀스객체
a = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90]
a[2:5] = ['a', 'b', 'c']  # 인덱스 2부터 4까지 값 할당
a
# [0, 10, 'a', 'b', 'c', 50, 60, 70, 80, 90]

a = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90]
a[2:5] = ['a']  # 인덱스 2부터 4까지에 값 1개를 할당하여 요소의 개수가 줄어듦
a
# [0, 10, 'a'. 50, 60, 70, 80, 90]

a = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90]
a[2:5] = ['a', 'b', 'c', 'd', 'e'] # 인덱스 2부터 4까지 값 5개를 할당하여 요소의 개수가 늘어남
a
# [0, 10, 'a', 'b', 'c', 'd', 'e', 50, 60, 70, 80, 90]

# 인덱스 증가폭을 지정하여 인덱스를 건너뛰면서 할당하기
# 시퀀스객체[시작인덱스:끝인덱스:인덱스증가폭] = 시퀀스객체
a = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90]
a[2:8:2] = ['a', 'b', 'c']
a
# [0, 10, 'a', 30, 'b', 50, 'c', 70, 80, 90]
# 단, 인덱스 증가폭을 지정했을 때는 슬라이스 범위의 요소 개수와 할당할 요소 개수가 정학이 일치해야함
# 튜플, range, 문자열은 슬라이스 범위를 지정하더라도 요소를 할당할 수 없다.

#del로 슬라이스 삭제하기
# del 시퀀스객체[시작인덱스:끝인덱스]
a = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90]
del a[2:5] # 인덱스 2부터 4까지 요소를 삭제
a
# [0, 10, 50, 60, 70, 80, 90]
a = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90]
del a[2:8:2]  # 인덱스 2부터 2씩 증가시키면서 인덱스 6까지 삭제
a
# [0, 10, 30, 50, 70, 80, 90]